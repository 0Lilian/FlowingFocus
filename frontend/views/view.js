class View extends Component {

    constructor (display_name,
                 slug,
                 icon,
                 hotkey,
                 dependencies = [],
                 use_iframe_isolation = true,
                 require_css_reset = true) {

        super(display_name,
              slug,
              icon,
              hotkey,
              dependencies);

        this.use_iframe_isolation = use_iframe_isolation;
        this.require_css_reset = require_css_reset;

        this.body = document.createElement("body")
        this.iframe;
    }

    static displayDefaultView () {

        Settings.get("default-view", function (value) {
            const default_view = View.getById(value)

            if (default_view !== null) {
                if (default_view.displayed === true) {
                    default_view.trigger()
                    return;
                }
            }
            // Else
            for (const view of View.getAll().reverse()) {
                if (view.displayed === true) {
                    view.trigger()
                }
            }
        })
    }

    init () {

        return new Promise((resolve, reject) => {
            this.waitForDependencies()
            .then(() => this.generateContent())
            .then(() => {
                // Dispatch the ready event.
                this.is_ready = true
                window.dispatchEvent(this.ready_event)
            })
            .then(() => this.generateIframe())
            .then(() => this.generateButton())
            .then(() => resolve())
            .then(() => this.insertContentInIframe())
            .catch(error => {
                error ? console.log("An error occured while trying to initialize this view " + this.id + ". Error : " + error) : null
                reject(error)
            })
        })
    }

    // async init () {
    //     try {
    //         await this.waitForDependencies()
    //         await this.generateIframe()
    //         await this.generateButton()
    //         await this.generateContent()
    //         // Dispatch the ready event.
    //         this.is_ready = true
    //         window.dispatchEvent(this.ready_event)
    //         return await this.insertContentInIframe()
    //     }
    //     catch (error) {
    //         console.log("An error occured while trying to initialize this view " + this.id + ". Error : " + error) : null
    //     }
    // }

    generateIframe () {

        return new Promise((resolve, reject) => {
            try {

                if (this.use_iframe_isolation === true) {
                    this.iframe = document.createElement("iframe")
                    this.iframe.classList.add("requires-css-reset")
                }
                else {
                    this.iframe = document.createElement("section")
                }

                this.iframe.classList.add("view-frame")

                if (this.use_iframe_isolation === true) {
                    this.iframe.src = browser.runtime.getURL("/frontend/staticfiles/templates/view.html")
                    document.body.appendChild(this.iframe)
                    resolve()
                }

                else {
                    const iframe_body = document.createElement("body")
                    this.iframe.appendChild(iframe_body)
                    document.body.appendChild(this.iframe)
                    resolve()
                }
            }
            catch (error) {
                reject("An error occured while generating iframe of view " + view.id + ". Error : " + error)
            }
        })
    }

    generateContent () {

        return new Promise((resolve, reject) => {

            try {

                this.body.innerHTML = "This content is generated by the default generateContent() method."

                // Resolve the promise.
                resolve()
            }
            catch (error) {
                reject("An error occured while generating content of view " + view.id + ". Error : " + error)
            }
        })
    }

    insertContentInIframe () {

        return new Promise((resolve, reject) => {

            try {

                if (this.use_iframe_isolation === true) {
                    const iframe_document = this.iframe.contentWindow.document;
                    if (iframe_document.readyState === "complete") {
                        iframe_document.body = this.body;
                    }
                    else {
                        this.iframe.addEventListener("load", function () {
                            const loaded_iframe_document = this.iframe.contentWindow.document;
                            loaded_iframe_document.body = this.body;
                        }.bind(this))
                    }
                }
                else {
                    const iframe_body = this.iframe.querySelector("body")
                    for (const child of this.body.cloneNode(true).querySelectorAll("body > *")) {
                        iframe_body.appendChild(child)
                    }
                }
                resolve()
            }
            catch (error) {
                reject("An error occured while inserting the content of view " + view.id + ". Error : " + error)
            }
        })
    }

    static last_displayed_view = null;
    _trigger () {

        // Do nothing if this is already the last displayed view
        if (this !== this.constructor.last_displayed_view) {

            if (this.constructor.last_displayed_view === null) {

                // Display this view iframe
                this.iframe.style.opacity = "0"
                this.iframe.style.display = "block";
                setTimeout(function () {
                    this.iframe.style.opacity = "1";
                }.bind(this), 40)
                this.constructor.last_displayed_view = this

                // Add the displayed class to this button
                this.button.classList.add("displayed")
            }
            else {

                // Remove the displayed class from the last displayed view's button.
                this.constructor.last_displayed_view.button.classList.remove("displayed")

                // Add the displayed class to this button
                this.button.classList.add("displayed")

                // Find the slide direction.
                const views = View.getAll().reverse()
                let direction;
                if (views.indexOf(this) < views.indexOf(this.constructor.last_displayed_view)) {
                    direction = "right"
                }
                else {
                    direction = "left"
                }

                // Hide the old view
                this.constructor.last_displayed_view.iframe.style.position = "absolute"
                this.constructor.last_displayed_view.iframe.style.marginLeft = direction === "left" ? "100vw" : "-100vw"
                this.iframe.style.marginLeft = direction === "left" ? "-100vw" : "100vw"
                this.iframe.style.display = "block";


                // Clone the last_view object and reset the previous view if it still a not displayed view
                const last_view = {...this.constructor.last_displayed_view}
                setTimeout(function () {
                    if (this.constructor.last_displayed_view.id !== last_view.id) {
                        last_view.iframe.style.display = "none"
                        last_view.iframe.style.marginLeft = "0"
                        this.constructor.last_displayed_view.iframe.style.position = "unset"
                    }
                }.bind(this), 250)

                // Display this view iframe
                setTimeout(function () {
                    this.iframe.style.marginLeft = "0";
                }.bind(this), 40)

                this.constructor.last_displayed_view = this

            }
        }
    }
}
